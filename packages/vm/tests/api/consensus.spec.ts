import tape from 'tape'
const level = require('level')
import Common from '@ethereumjs/common'
import { Block } from '@ethereumjs/block'
import VM from '../../lib'
import { SecureTrie as Trie } from '@ethereumjs/trie'
import { DefaultStateManager } from '../../lib/state'
import Blockchain from '@ethereumjs/blockchain'
const trace = require('../../tools/0xa92cf6853417158711a0021612cf200338cf58166fb3494076999f5cdf00eb27.json')
import { compareTrace } from '../../tools/compareTrace'

tape('consensus bugs', (t) => {
    t.test('Rinkeby block 14182', async (st) => {
        const common = new Common({ chain: 'rinkeby', hardfork: 'spuriousDragon' })
        const RLP = Buffer.from("", 'hex')
        const block = Block.fromRLPSerializedBlock(RLP, { common })
      
        const stateDB = level('/Users/jochem/Library/Ethereum/ethereumjs/rinkeby/state')
        const trie = new Trie(stateDB)
        const stateManager = new DefaultStateManager({ trie, common })
        // Ensure we run on the right root
        stateManager.setStateRoot(Buffer.from('135fae6d4909a072d77707a797769afc72f6239a72173e0f411c7700af66ac26', 'hex'))


        const chainDB = level('/Users/jochem/Library/Ethereum/ethereumjs/rinkeby/chain')
        const blockchain = await Blockchain.create({
            db: chainDB,
            common,
            validateBlocks: true,
            validateConsensus: false,
        })

        const vm = new VM({ stateManager, blockchain, common })

        compareTrace(vm, trace)

        await vm.runBlock({ block })


    })
})
